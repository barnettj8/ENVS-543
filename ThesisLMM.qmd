---
title: "ThesisLMM"
format: html
editor: visual
---

```{r setup, include = FALSE}

knitr::opts_chunk$set(
  echo = TRUE,      # Hide the code
  warning = FALSE,   # Suppress warnings
  message = FALSE    # Suppress messages
)

```

```{r}
library(tidyverse)
library(kableExtra)
library(ggplot2)
library(car)
library(patchwork)
library(dplyr)
library(gridExtra)
library(tidyr)
library(readxl)

```

```{r}

allthesis <- read_excel("C:/Users/barne/Downloads/ThesisRData.xlsx", sheet = 1)

allthesis <- allthesis |> 
  mutate(TSS = as.numeric(TSS))

```

```{r}
avgthesis <- allthesis |> 
  group_by(Site, Lake) |>  # Include Lake as a grouping variable
  summarise(across(where(is.numeric), mean, na.rm = TRUE), .groups = "drop")

```

# Basic LM Models

```{r}

# Function to get regression statistics (equation, R2, p-value, SE)

get_regression_stats <- function(x, y) {
  model <- lm(y ~ x)
  eq <- paste("y = ", round(coef(model)[2], 2), "x + ", round(coef(model)[1], 2), sep = "")
  rsq <- paste("R² = ", round(summary(model)$r.squared, 3), sep = "")
  pval <- paste("p = ", round(summary(model)$coefficients[2, 4], 3), sep = "")
  se <- paste("SE = ", round(summary(model)$coefficients[2, 2], 3), sep = "")  # Extract SE
  return(list(eq = eq, rsq = rsq, pval = pval, se = se))
}

reg_stats_p1 <- get_regression_stats(avgthesis$TSS, avgthesis$kd)
reg_stats_p2 <- get_regression_stats(avgthesis$CHLa, avgthesis$kd)

```

```{r}

# TSS vs kd

p1 <- ggplot(avgthesis, aes(x = TSS, y = kd)) +
  geom_point(color = "gray70") +  
  geom_smooth(method = "lm", color = "black", se = FALSE) +  
  labs(title = "kd vs TSS", x = "TSS (mg L⁻¹)", y = "kd (m⁻¹)") +
  geom_text(x = max(avgthesis$TSS), y = max(avgthesis$kd), 
            label = paste(reg_stats_p1$eq, "\n", reg_stats_p1$rsq, "\n", reg_stats_p1$pval, "\n", reg_stats_p1$se), 
            hjust = 1, vjust = 2, size = 2, color = "black") + 
  theme_minimal() +
  theme(
    plot.title = element_text(size = 7, color = "black"),  
    axis.title.x = element_text(size = 6, color = "black"), 
    axis.title.y = element_text(size = 6, color = "black"))

```

```{r}

# CHLa vs kd

p2 <- ggplot(avgthesis, aes(x = CHLa, y = kd)) +
  geom_point(color = "gray70") +  
  geom_smooth(method = "lm", color = "black", se = FALSE) +  
  labs(title = "kd vs CHLa", x = "CHLa (ug L⁻¹)", y = "kd (m⁻¹)") +
  geom_text(x = max(avgthesis$CHLa), y = max(avgthesis$kd), 
            label = paste(reg_stats_p2$eq, "\n", reg_stats_p2$rsq, "\n", reg_stats_p2$pval, "\n", reg_stats_p2$se), 
            hjust = 1, vjust = 2, size = 2, color = "black") + 
  theme_minimal() +
  theme(
    plot.title = element_text(size = 7, color = "black"),  
    axis.title.x = element_text(size = 6, color = "black"), 
    axis.title.y = element_text(size = 6, color = "black"))

```

```{r}

# Calculate residual kd

avgthesis <- avgthesis |> 
  mutate(
    Residualkd = kd - (TSS*0.20337)
  )

reg_stats_p3 <- get_regression_stats(avgthesis$CDOM, avgthesis$Residualkd)

```

```{r}

# CDOM vs Residual kd

p3 <- ggplot(avgthesis, aes(x = CDOM, y = Residualkd)) +
  geom_point(color = "gray70") +  
  geom_smooth(method = "lm", color = "black", se = FALSE) +  
  labs(title = "Residual kd vs CDOM", x = "CDOM (m⁻¹)", y = "Residualkd (m⁻¹)") +
  geom_text(x = max(avgthesis$CDOM), y = max(avgthesis$Residualkd), 
            label = paste(reg_stats_p3$eq, "\n", reg_stats_p3$rsq, "\n", reg_stats_p3$pval, "\n", reg_stats_p3$se), 
            hjust = 1, vjust = 2, size = 2, color = "black") + 
  theme_minimal() +
  theme(
    plot.title = element_text(size = 7, color = "black"),  
    axis.title.x = element_text(size = 6, color = "black"), 
    axis.title.y = element_text(size = 6, color = "black"))

```

```{r}

grid.arrange(p1, p2, p3, ncol = 2)

```

```{r}

p1summary <- lm(kd ~ TSS, data = allthesis)

summary(p1summary)

p2summary <- lm(kd ~ CHLa, data = avgthesis)

#summary(p2summary)

p3summary <- lm(Residualkd ~ CDOM, data = avgthesis)

#summary(p3summary)

```

```{r}
# Function to create diagnostic plots for each model
create_diagnostic_plots <- function(model) {
  par(mfrow = c(2, 2))

  # Residuals vs Fitted plot
  plot(model, which = 1, main = "Residuals vs Fitted")

  # Normal Q-Q plot
  plot(model, which = 2, main = "Normal Q-Q")

  # Scale-Location plot
  plot(model, which = 3, main = "Scale-Location")

  # Residuals vs Leverage plot
  plot(model, which = 5, main = "Residuals vs Leverage")
}
```

```{r}

create_diagnostic_plots(p1summary)

create_diagnostic_plots(p2summary)

create_diagnostic_plots(p3summary)

```

```{r}

PercentContributions <- avgthesis |>
  mutate(
    `%TSS` = ((TSS*0.20337)/kd)*100,
    `%CDOM` = ((CDOM*0.17382)/kd)*100) |>
  summarize(`Site`, `%TSS`, `%CDOM`)

```

```{r}

# Pivot the data into long format for ggplot
PercentContributions_long <- PercentContributions |> 
  pivot_longer(cols = c(`%TSS`, `%CDOM`), 
               names_to = "Variable", 
               values_to = "PercentContribution")

# Manually recoding the 'Site' variable
PercentContributions_long <- PercentContributions_long |>
  mutate(
    Site = dplyr::recode(Site, 
                         "2-BRI010.78" = "BRI_1",
                         "2-BRI013.12" = "BRI_2",
                         "5ANTW127.14" = "Barfoot",
                         "Chickahominy" = "Chick",
                         "Harrison" = "Harrison",
                         "2-SDY004.27" = "SDY_1",
                         "2-SDY005.85" = "SDY_2",
                         "2-MBN000.96" = "SDY_3",
                         "2-SFT031.08" = "SFT_1",
                         "2-DYC000.19" = "SFT_2",
                         "2-SFT033.42" = "SFT_3",
                         "2-SFT034.38" = "SFT_4",
                         "Dam Surface" = "ANNA"))

# Change the site order for plot visualization
site_order <- c( "Harrison", "Chick", "BRI_1", "BRI_2", "SDY_1", "SDY_2", "SDY_3", "SFT_1", "SFT_2", "SFT_3", "SFT_4", "Barfoot", "ANNA")

PercentContributions_long <- PercentContributions_long |>
  mutate(Site = factor(Site, levels = site_order))



```

```{r}

ggplot(PercentContributions_long, aes(x = Site, y = PercentContribution, fill = Variable)) +
  geom_bar(stat = "identity", position = "stack") +
  labs(
    title = "% kd Contributions of TSS and CDOM by Site",
    x = "Site",
    y = "% kd",
    fill = "Variable"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  


```


# Linear Mixed Effect Models

Here we use "Lake" as a random effect/grouping mechanism

```{r}

library(lme4)
library(MuMIn) 
library(lmerTest)

```

```{r}

lmm1tss <- lmer(kd ~ CDOM + CHLa + TSS + (1|Date), data = allthesis)
summary(lmm1tss)

#anova(lmm1tss)

#change date to Month Year format
```

```{r}

# Extract fixed effects
fixed_effects <- fixef(lmm1tss)

# Get the summary of the model
summary_lmm1tss <- summary(lmm1tss)

# Extract p-values from the 5th column of the model summary
if (ncol(summary_lmm1tss$coefficients) >= 5) {
    p_values <- summary_lmm1tss$coefficients[, 5]
} else {
    p_values <- NA  # Assign NA if p-values are missing
}

# Extract standard errors from the 2nd column of model summary
se_values <- summary_lmm1tss$coefficients[, 2]

# Calculate the R-squared values for the mixed model
r_squared_values <- r.squaredGLMM(lmm1tss)

# Extract specific coefficients (intercept and TSS coefficient)
intercept <- fixed_effects[1]
tss_coefficient <- fixed_effects[2]

equation <- paste("y = ", round(tss_coefficient, 4), "x", " + ", round(intercept, 4), sep = "")

cat("\nThe relationship equation for LMM (kd ~ TSS) is:\n", equation, "\n")
cat("\nP-value for: ", round(p_values[2], 4), "\n")
cat("Standard Error: ", round(se_values[2], 4), "\n")
cat("Marginal R-squared: ", round(r_squared_values[1], 4), "\n")
cat("Conditional R-squared: ", round(r_squared_values[2], 4), "\n")

```

```{r}

# In the summary pane, we can see the random effect variance (0.269856) and the residual variance (0.003389)

0.27/(0.27+0.0034)

#So the differences between lakes explains ~ 98% of the variance

```


```{r}
lmm1chla <- lmer(kd ~ CHLa + (1|Lake), data = avgthesis)
summary(lmm1chla)
```

```{r}
# Extract fixed effects from the model
fixed_effects_chla <- fixef(lmm1chla)

# Get the summary of the model
summary_lmm1chla <- summary(lmm1chla)

# Extract p-values from the 5th column of the model summary
p_values_chla <- summary_lmm1chla$coefficients[, 5]

# Extract standard errors from the 2nd column of the model summary
se_values_chla <- summary_lmm1chla$coefficients[, 2]

# Calculate the R-squared values for the mixed model
r_squared_values_chla <- r.squaredGLMM(lmm1chla)

# Extract specific coefficients (intercept and CHLa coefficient)
intercept_chla <- fixed_effects_chla[1]
chla_coefficient <- fixed_effects_chla[2]


equation_chla <- paste("y = ", round(chla_coefficient, 4), "x", " + ", round(intercept_chla, 4), sep = "")

cat("\nThe relationship equation for LMM (kd ~ CHLa) is:\n", equation_chla, "\n")
cat("\nP-value for: ", round(p_values_chla[2], 4), "\n")
cat("Standard Error: ", round(se_values_chla[2], 4), "\n")
cat("Marginal R-squared: ", round(r_squared_values_chla[1], 4), "\n")
cat("Conditional R-squared: ", round(r_squared_values_chla[2], 4), "\n")


```

```{r}

# Calculate LMM residual kd

avgthesis <- avgthesis |> 
  mutate(
    LMMResidualkd = kd - (TSS*0.14229)
  )

```

```{r}
lmm1cdom <- lmer(LMMResidualkd ~ CDOM + (1|Lake), data = avgthesis)
summary(lmm1cdom)

```

```{r}
# Extract fixed effects from the model
fixed_effects_residual <- fixef(lmm1cdom)

# Get the summary of the model
summary_lmm1cdom <- summary(lmm1cdom)

# Extract p-values from the 5th column of the model summary
p_values_residual <- summary_lmm1cdom$coefficients[, 5]

# Extract standard errors from the 2nd column of the model summary
se_values_residual <- summary_lmm1cdom$coefficients[, 2]

# Calculate the R-squared values for the mixed model
r_squared_values_residual <- r.squaredGLMM(lmm1cdom)

# Extract specific coefficients (intercept and CDOM coefficient)
intercept_residual <- fixed_effects_residual[1]
cdom_coefficient <- fixed_effects_residual[2]

# Create the equation for the model
equation_residual <- paste("y = ", round(cdom_coefficient, 4), "x", " + ", round(intercept_residual, 4), sep = "")

cat("\nThe relationship equation for LMM (Residualkd ~ CDOM) is:\n", equation_residual, "\n")
cat("\nP-value for: ", round(p_values_residual[2], 4), "\n")
cat("Standard Error: ", round(se_values_residual[2], 4), "\n")
cat("Marginal R-squared: ", round(r_squared_values_residual[1], 4), "\n")
cat("Conditional R-squared: ", round(r_squared_values_residual[2], 4), "\n")

```

```{r}

LMMPercentContributions <- avgthesis |>
  mutate(
    `LMM%TSS` = ((TSS*0.1423)/kd)*100,
    `LMM%CDOM` = ((CDOM*0.1862)/kd)*100) |>
  summarize(`Site`, `LMM%TSS`, `LMM%CDOM`)

head(LMMPercentContributions)

```

```{r}

plot(lmm1tss)
qqnorm(resid(lmm1tss))
qqline(resid(lmm1tss))

```

```{r}

plot(lmm1chla)
qqnorm(resid(lmm1chla))
qqline(resid(lmm1chla))

```

```{r}

plot(lmm1cdom)
qqnorm(resid(lmm1cdom))
qqline(resid(lmm1cdom))

```


```{r}

# Pivot the data into long format for ggplot
LMMPercentContributions_Long <- LMMPercentContributions |> 
  pivot_longer(cols = c(`LMM%TSS`, `LMM%CDOM`), 
               names_to = "Variable", 
               values_to = "PercentContribution")

# Manually recoding the 'Site' variable
LMMPercentContributions_Long <- LMMPercentContributions_Long |>
  mutate(
    Site = dplyr::recode(Site, 
                         "2-BRI010.78" = "BRI_1",
                         "2-BRI013.12" = "BRI_2",
                         "5ANTW127.14" = "Barfoot",
                         "Chickahominy" = "Chick",
                         "Harrison" = "Harrison",
                         "2-SDY004.27" = "SDY_1",
                         "2-SDY005.85" = "SDY_2",
                         "2-MBN000.96" = "SDY_3",
                         "2-SFT031.08" = "SFT_1",
                         "2-DYC000.19" = "SFT_2",
                         "2-SFT033.42" = "SFT_3",
                         "2-SFT034.38" = "SFT_4",
                         "Dam Surface" = "ANNA"))

# Change the site order for plot visualization
site_order <- c( "Harrison", "Chick", "BRI_1", "BRI_2", "SDY_1", "SDY_2", "SDY_3", "SFT_1", "SFT_2", "SFT_3", "SFT_4", "Barfoot", "ANNA")

LMMPercentContributions_Long <- LMMPercentContributions_Long |>
  mutate(Site = factor(Site, levels = site_order))

```

```{r}

ggplot(LMMPercentContributions_Long, aes(x = Site, y = PercentContribution, fill = Variable)) +
  geom_bar(stat = "identity", position = "stack") +
  labs(
    title = "% kd Contributions of TSS and CDOM by Site",
    x = "Site",
    y = "% kd",
    fill = "Variable"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(limits = c(0, 100))


```

# Comparison of Models

```{r}
# Comparison of kd/tss lm and lmer models

AIC(p1summary, lmm1tss)

```


```{r}
# Comparison of residualkd/cdom lm and lmer models

AIC(p3summary, lmm1cdom)

```

This indicates that the basic linear model is a better fit than the linear mixed effect model. Since the residual kd for the lmer was based on the lmer tss model, could it be that the random effects of lakes are already taken into account?

i.e. would it be better to do a lmer for kd vs tss then do a regular lm for residual kd vs cdom? This way we arent accounting for random effects twice?


# Multiple Linear Mixed Effect Model (AFTER DR VONESH DISCUSSION)

```{r}

# Change format of Date to be Month/Year instead of Year/Month/Day
# This will allow us to account for "Date" as a random effect
# This can't currently be done as reservoirs were sampled on different days in each month

library(lubridate)

allthesis <- allthesis %>%
  mutate(Date = as.Date(Date),          
         Date = format(Date, "%m/%Y"))  


```


```{r}

lmmall <- lmer(kd ~ CDOM + CHLa + TSS + (1|Date), data = allthesis)
summary(lmmall)

#anova(lmm1tss)

```

```{r}

lmmall2 <- lmer(kd ~ CDOM + CHLa + TSS + (1|Date/Lake), data = allthesis)
summary(lmmall2)

```

```{r}

anova(lmmall, lmmall2)

```

# Scaling Data then LMM

It is good practice to standardise your explanatory variables before proceeding so that they have a mean of zero (“centering”) and standard deviation of one (“scaling”). It ensures that the estimated coefficients are all on the same scale, making it easier to compare effect sizes. 

scale() centers the data (the column mean is subtracted from the values in the column) and then scales it (the centered column values are divided by the column’s standard deviation).


```{r}

#hist(allthesis$kd)
#hist(allthesis$TSS)
#hist(allthesis$CHLa)
#hist(allthesis$CDOM)

```

```{r}

allthesis$kd1 <- scale(allthesis$kd, center = TRUE, scale = TRUE)
#hist(allthesis$kd1)

allthesis$TSS1 <- scale(allthesis$TSS, center = TRUE, scale = TRUE)
#hist(allthesis$TSS1)

allthesis$CHLa1 <- scale(allthesis$CHLa, center = TRUE, scale = TRUE)
#hist(allthesis$CHLa1)

allthesis$CDOM1 <- scale(allthesis$CDOM, center = TRUE, scale = TRUE)
#hist(allthesis$CDOM1)

```

```{r}

allthesis$kd2 <- scale(allthesis$kd, center = TRUE, scale = TRUE)
#hist(allthesis$kd2)

allthesis$TSS2 <- scale(log(allthesis$TSS), center = TRUE, scale = TRUE)
#hist(allthesis$TSS2)

allthesis$CHLa2 <- scale(log(allthesis$CHLa), center = TRUE, scale = TRUE)
#hist(allthesis$CHLa2)

allthesis$CDOM2 <- scale(log(allthesis$CDOM), center = TRUE, scale = TRUE)
#hist(allthesis$CDOM2)

```

```{r}

# Scaled Predictors

lmmall3 <- lmer(kd1 ~ CDOM1 + CHLa1 + TSS1 + (1|Date), data = allthesis)
summary(lmmall3)

```

```{r}

# Scaled Predictors

lmmall4 <- lmer(kd1 ~ CDOM1 + CHLa1 + TSS1 + (1|Date/Lake), data = allthesis)
summary(lmmall4)

```

```{r}

#Log transformed and scaled predictors

lmmall5 <- lmer(kd2 ~ CDOM2 + CHLa2 + TSS2 + (1|Date), data = allthesis)
summary(lmmall5)

```

```{r}

#Log transformed and scaled predictors

lmmall6 <- lmer(kd2 ~ CDOM2 + CHLa2 + TSS2 + (1|Date/Lake), data = allthesis)
summary(lmmall6)

```

```{r}

anova(lmmall, lmmall2, lmmall3, lmmall4, lmmall5, lmmall6)

```

So according to this anova, the best model would be lmmall2 or lmmall (both using data that hasn't been scaled) based on AIC values





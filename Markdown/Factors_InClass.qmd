---
title: "Factors HW"
format: html
editor: visual
knitr:
  opts_chunk: 
    warning: false
---

## 

```{r}
# install.packages("forcats")
# install.packages("lunar")

library(forcats)
library(lunar)
library(knitr)
library(kableExtra)
library(ggplot2)

library(tidyverse)

source("get_rice_data.R")

rice <- getRiceData()

```

## Changing the Order of the Weekdays to Start With Monday

Here, the Weekday variable is converted into a factor and the levels are redefined to go from Monday to Sunday. This is checked using the levels() function, the output of which is seen below. Clearly, the order starts with Monday and moves through the week, ending on Sunday.

```{r}
rice$Weekday <- factor (rice$Weekday)


rice <- rice |>
  mutate(Weekday = fct_relevel(Weekday, 
                               c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")))

# Check the levels
levels(rice$Weekday)


```

## Adding Two Addtitional Factor Columns

Here, the rice Weekday data mutated to have a Weekday_Type column and the data is recoded so that Mon-Fri will be listed as weekdays and Sat-Sunday are weekends. This is seen by the small table below showing the switch in dates from a Friday (weekday), to a Saturday (weekend)

```{r}
df <- rice |>
  mutate(Weekday_Type = fct_recode(Weekday,
                                   "Weekday" = "Monday",
                                   "Weekday" = "Tuesday",
                                   "Weekday" = "Wednesday",
                                   "Weekday" = "Thursday",
                                   "Weekday" = "Friday",
                                   "Weekend" = "Saturday",
                                   "Weekend" = "Sunday"))

viewdf <- df |>
  select(Date, Weekday, Weekday_Type)

viewdf[286:292, ]


```

## Create Column for the 4 Primary Lunar Phases

Here, the lunar package is used to mutate the rice data and add a column called LunarPhase. This column reports which of the four primary moon phases is present for each date. The four moon phases are plotted across time for the given rice dataset.

```{r}

df <- df |> 
  mutate (LunarPhase = lunar.phase(Date, shift = 0, name = 4), 
          LunarPhase = case_when(
      LunarPhase == "Waxing" ~ "First Quarter",
      LunarPhase == "Waning" ~ "Last Quarter",
      TRUE ~ LunarPhase
    )
  )

ggplot(df, aes(x = Date, y = LunarPhase)) +
  geom_point() +
  scale_y_discrete(limits = c("New", "First Quarter", "Full", "Last Quarter")) +
  labs(title = "Lunar Phases Over Time", x = "Date", y = "Lunar Phase") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

## Create a Column that Indicates if Tide is Incoming or Outgoing

This is done by creating a Depth_diff column that indicates if the current depth is greater than or less that the previous depth measurement. If it is less, another column will indicate it as being an outgoing tide, if it is above, then the column will list it as an incoming tide. This is visualized using an example week of depths during a week in January. The incoming tide is in the blue portion and the outgoing tide is in the red portion.

```{r}

newdf <- df |> 
  mutate(Depth_diff = Depth_m - lag(Depth_m))|>
  mutate(Tide = if_else(Depth_diff > 0, "incoming", "outgoing"))

head(newdf)

```

```{r}

newdf |>
  filter(month == "January" & day >= 7 & day <= 13) |>
  with(plot(Date, Depth_m, 
            type = "p",  # Plot points
            xlab = "Date",
            ylab = "Water Depth (m)",
            main = "Tides in Example Week in January",
            pch = 19))

newdf |>
  filter(month == "January" & day >= 7 & day <= 13 & Tide == "incoming") |>
  with(points(Date, Depth_m, 
              col = "blue",
              pch = 19))  
newdf |>
  filter(month == "January" & day >= 7 & day <= 13 & Tide == "outgoing") |>
  with(points(Date, Depth_m, 
              col = "red",  
              pch = 19))  

legend("bottomright",                # Position of the legend
       legend = c("Incoming Tide", "Outgoing Tide"),  # Labels
       col = c("blue", "red"),     # Colors corresponding to the labels
       pch = 19)

```
